# code: lang=ansible
---
- name: Ensure cert-manager namespace exists
  delegate_to: localhost
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Namespace
      metadata:
        name: cert-manager
  run_once: true

- name: Create root CA secret for cert-manager
  delegate_to: localhost
  kubernetes.core.k8s:
    state: present
    namespace: cert-manager
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: root-ca-secret
      type: kubernetes.io/tls
      data:
        tls.crt: "{{ lookup('ansible.builtin.file', 'certs/certs/root.crt') | b64encode }}"
        tls.key: "{{ lookup('ansible.builtin.file', 'certs/private/root.key') | b64encode }}"
  run_once: true

- name: Create ClusterIssuer for root CA
  delegate_to: localhost
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: cert-manager.io/v1
      kind: ClusterIssuer
      metadata:
        name: root-ca
      spec:
        ca:
          secretName: root-ca-secret
  run_once: true

- name: Discover intermediate certificate directories
  delegate_to: localhost
  ansible.builtin.find:
    paths: certs/intermediate
    file_type: directory
  register: intermediate_dirs
  run_once: true

- name: Filter valid intermediate directories (exclude 'newcerts')
  delegate_to: localhost
  ansible.builtin.set_fact:
    valid_intermediates: >-
      {{ intermediate_dirs.files
         | map(attribute='path')
         | select('match', '^certs/intermediate/[^/]+$')
         | reject('search', '/newcerts$')
         | list }}
  run_once: true

- name: Rebuild chain.crt for each intermediate CA # noqa: no-changed-when
  delegate_to: localhost
  vars:
    cert_name: "{{ item | basename }}"
    intermediate_crt: "{{ item }}/certs/{{ cert_name }}.crt"
    root_crt: "certs/certs/root.crt"
    chain_output: "{{ item }}/certs/chain.crt"
  ansible.builtin.shell: |
    cat "{{ intermediate_crt }}" "{{ root_crt }}" > "{{ chain_output }}"
  args:
    executable: /bin/bash
  loop: "{{ valid_intermediates }}"
  loop_control:
    label: "{{ cert_name }}"
  run_once: true

- name: Create secrets for intermediate CAs
  delegate_to: localhost
  vars:
    cert_name: "{{ item | basename }}"
    cert_path: "{{ item }}/certs/chain.crt"
    key_path: "{{ item }}/private/{{ cert_name }}.key"
  kubernetes.core.k8s:
    state: present
    namespace: cert-manager
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: "{{ cert_name }}-ca-secret"
      type: kubernetes.io/tls
      data:
        tls.crt: "{{ lookup('ansible.builtin.file', cert_path) | b64encode }}"
        tls.key: "{{ lookup('ansible.builtin.file', key_path) | b64encode }}"
  loop: "{{ valid_intermediates }}"
  loop_control:
    label: "{{ item | basename }}"
  run_once: true

- name: Create ClusterIssuers for intermediate CAs
  delegate_to: localhost
  vars:
    cert_name: "{{ item | basename }}"
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: cert-manager.io/v1
      kind: ClusterIssuer
      metadata:
        name: "{{ cert_name }}-ca"
      spec:
        ca:
          secretName: "{{ cert_name }}-ca-secret"
  loop: "{{ valid_intermediates }}"
  loop_control:
    label: "{{ item | basename }}"
  run_once: true

- name: Ensure cluster wildcard certificate namespace exists
  delegate_to: localhost
  when: cert.namespace.create | default(true)
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Namespace
      metadata:
        name: "{{ cert.namespace.name }}"
  run_once: true
  loop: "{{ k3s.wildcards }}"
  loop_control:
    loop_var: cert

- name: Generate cluster wildcard certificate
  delegate_to: localhost
  ansible.builtin.template:
    src: wildcard-internal.yml.j2
    dest: /tmp/wildcard-{{ cert.name }}.yml
    mode: "0644"
  run_once: true
  loop: "{{ k3s.wildcards }}"
  loop_control:
    loop_var: cert

- name: Apply cluster wildcard certificate
  delegate_to: localhost
  kubernetes.core.k8s:
    src: /tmp/wildcard-{{ cert.name }}.yml
    state: present
  run_once: true
  loop: "{{ k3s.wildcards }}"
  loop_control:
    loop_var: cert
